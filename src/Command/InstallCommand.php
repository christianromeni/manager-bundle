<?php

/*
 * This file is part of Contao.
 *
 * Copyright (c) 2005-2016 Leo Feyer
 *
 * @license LGPL-3.0+
 */

namespace Contao\ManagerBundle\Command;

use Contao\CoreBundle\Command\InstallCommand as BaseInstallCommand;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;

/**
 * Installs the Contao Managed Edition.
 *
 * @author Andreas Schempp <https://github.com/aschempp>
 */
class InstallCommand extends BaseInstallCommand
{
    /**
     * @var Filesystem
     */
    private $fs;

    /**
     * @var SymfonyStyle
     */
    private $io;

    /**
     * @var string
     */
    private $rootDir;

    /**
     * @inheritDoc
     */
    protected function configure()
    {
        $this
            ->setName('contao:install')
            ->setDescription('Installs the Contao Managed Edition')
        ;
    }

    /**
     * @inheritDoc
     */
    protected function executeLocked(InputInterface $input, OutputInterface $output)
    {
        // The argument is necessary only for the parent class
        $this->getDefinition()->addArgument(
            new InputArgument('target', InputArgument::OPTIONAL, 'The target directory', 'web')
        );

        parent::executeLocked($input, $output);

        $this->fs = new Filesystem();
        $this->io = new SymfonyStyle($input, $output);
        $this->rootDir = dirname($this->getContainer()->getParameter('kernel.root_dir'));

        $this->addInitializePhp();

        $webDirs = new InstallWebDirCommand();
        $webDirs->run($input, $output);

        return 0;
    }

    /**
     * Adds the initialize.php file.
     */
    private function addInitializePhp()
    {
        $this->fs->dumpFile(
            $this->rootDir.'/system/initialize.php',
            <<<'EOF'
<?php

use Contao\CoreBundle\Response\InitializeControllerResponse;
use Symfony\Component\HttpFoundation\Request;

if (!defined('TL_SCRIPT')) {
    die('Your script is not compatible with Contao 4.');
}

/** @var Composer\Autoload\ClassLoader */
$loader = require __DIR__.'/../vendor/autoload.php';

AnnotationRegistry::registerLoader([$loader, 'loadClass']);
ManagerBundlePlugin::autoloadModules(__DIR__.'/modules');

$kernel = new ContaoKernel('prod', false);
$kernel->setRootDir(dirname(__DIR__).'/app');
$response = $kernel->handle(Request::create('/_contao/initialize', 'GET', [], [], [], $_SERVER));

// Send the response if not generated by the InitializeController
if (!($response instanceof InitializeControllerResponse)) {
    $response->send();
    $kernel->terminate($request, $response);
    exit;
}

EOF
        );

        $this->io->text("Added/updated the <comment>system/initialize.php</comment> file.\n");
    }
}
